/* 
 * Docusign eSignature REST API
 *
 * The Docusign eSignature REST API provides you with a powerful, convenient, and simple Web services API for interacting with Docusign.
 *
 * OpenAPI spec version: v2.1
 * Contact: devcenter@docusign.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace DocuSign.eSign.Model
{
    /// <summary>
    /// BrandLogoIds
    /// </summary>
    [DataContract]
    public partial class BrandLogoIds :  IEquatable<BrandLogoIds>, IValidatableObject
    {
        public BrandLogoIds()
        {
            // Empty Constructor
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BrandLogoIds" /> class.
        /// </summary>
        /// <param name="EmailLogoId">EmailLogoId.</param>
        /// <param name="PrimaryLogoId">PrimaryLogoId.</param>
        /// <param name="SecondaryLogoId">SecondaryLogoId.</param>
        public BrandLogoIds(string EmailLogoId = default(string), string PrimaryLogoId = default(string), string SecondaryLogoId = default(string))
        {
            this.EmailLogoId = EmailLogoId;
            this.PrimaryLogoId = PrimaryLogoId;
            this.SecondaryLogoId = SecondaryLogoId;
        }
        
        /// <summary>
        /// Gets or Sets EmailLogoId
        /// </summary>
        [DataMember(Name="emailLogoId", EmitDefaultValue=false)]
        public string EmailLogoId { get; set; }
        /// <summary>
        /// Gets or Sets PrimaryLogoId
        /// </summary>
        [DataMember(Name="primaryLogoId", EmitDefaultValue=false)]
        public string PrimaryLogoId { get; set; }
        /// <summary>
        /// Gets or Sets SecondaryLogoId
        /// </summary>
        [DataMember(Name="secondaryLogoId", EmitDefaultValue=false)]
        public string SecondaryLogoId { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BrandLogoIds {\n");
            sb.Append("  EmailLogoId: ").Append(EmailLogoId).Append("\n");
            sb.Append("  PrimaryLogoId: ").Append(PrimaryLogoId).Append("\n");
            sb.Append("  SecondaryLogoId: ").Append(SecondaryLogoId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as BrandLogoIds);
        }

        /// <summary>
        /// Returns true if BrandLogoIds instances are equal
        /// </summary>
        /// <param name="other">Instance of BrandLogoIds to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BrandLogoIds other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.EmailLogoId == other.EmailLogoId ||
                    this.EmailLogoId != null &&
                    this.EmailLogoId.Equals(other.EmailLogoId)
                ) && 
                (
                    this.PrimaryLogoId == other.PrimaryLogoId ||
                    this.PrimaryLogoId != null &&
                    this.PrimaryLogoId.Equals(other.PrimaryLogoId)
                ) && 
                (
                    this.SecondaryLogoId == other.SecondaryLogoId ||
                    this.SecondaryLogoId != null &&
                    this.SecondaryLogoId.Equals(other.SecondaryLogoId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.EmailLogoId != null)
                    hash = hash * 59 + this.EmailLogoId.GetHashCode();
                if (this.PrimaryLogoId != null)
                    hash = hash * 59 + this.PrimaryLogoId.GetHashCode();
                if (this.SecondaryLogoId != null)
                    hash = hash * 59 + this.SecondaryLogoId.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }
}

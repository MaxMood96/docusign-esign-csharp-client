/* 
 * DocuSign REST API
 *
 * The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.
 *
 * OpenAPI spec version: v2.1
 * Contact: devcenter@docusign.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using DocuSign.eSign.Client;
using DocuSign.eSign.Model;

namespace DocuSign.eSign.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISignatureApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Complete Sign Hash
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        
        /// <param name="completeSignRequest"> (optional)</param>
        
        /// <returns></returns>
        CompleteSignHashResponse CompleteSignHash (CompleteSignRequest completeSignRequest = null);

        /// <summary>
        /// Complete Sign Hash
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        
        /// <param name="completeSignRequest"> (optional)</param>
        
        /// <returns>ApiResponse of </returns>
        ApiResponse<CompleteSignHashResponse> CompleteSignHashWithHttpInfo (CompleteSignRequest completeSignRequest = null);
        /// <summary>
        /// Get User Info To Sign Document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        
        
        
        /// <returns></returns>
        UserInfoResponse GetUserInfo ();

        /// <summary>
        /// Get User Info To Sign Document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        
        
        
        /// <returns>ApiResponse of </returns>
        ApiResponse<UserInfoResponse> GetUserInfoWithHttpInfo ();
        /// <summary>
        /// Report status from the TSP to DocuSign
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        
        /// <param name="tspHealthCheckRequest"> (optional)</param>
        
        /// <returns></returns>
        void HealthCheck (TspHealthCheckRequest tspHealthCheckRequest = null);

        /// <summary>
        /// Report status from the TSP to DocuSign
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        
        /// <param name="tspHealthCheckRequest"> (optional)</param>
        
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> HealthCheckWithHttpInfo (TspHealthCheckRequest tspHealthCheckRequest = null);
        /// <summary>
        /// Get Signature Session Info To Sign Document Hash
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        
        /// <param name="signSessionInfoRequest"> (optional)</param>
        
        /// <returns></returns>
        SignHashSessionInfoResponse SignHashSessionInfo (SignSessionInfoRequest signSessionInfoRequest = null);

        /// <summary>
        /// Get Signature Session Info To Sign Document Hash
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        
        /// <param name="signSessionInfoRequest"> (optional)</param>
        
        /// <returns>ApiResponse of </returns>
        ApiResponse<SignHashSessionInfoResponse> SignHashSessionInfoWithHttpInfo (SignSessionInfoRequest signSessionInfoRequest = null);
        /// <summary>
        /// Report an error from the tsp to docusign
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        
        /// <param name="updateTransactionRequest"> (optional)</param>
        
        /// <returns></returns>
        UpdateTransactionResponse UpdateTransaction (UpdateTransactionRequest updateTransactionRequest = null);

        /// <summary>
        /// Report an error from the tsp to docusign
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        
        /// <param name="updateTransactionRequest"> (optional)</param>
        
        /// <returns>ApiResponse of </returns>
        ApiResponse<UpdateTransactionResponse> UpdateTransactionWithHttpInfo (UpdateTransactionRequest updateTransactionRequest = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Complete Sign Hash
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        
        /// <param name="completeSignRequest"> (optional)</param>
        
        /// <returns>Task of CompleteSignHashResponse</returns>
        System.Threading.Tasks.Task<CompleteSignHashResponse> CompleteSignHashAsync (CompleteSignRequest completeSignRequest = null);

        /// <summary>
        /// Complete Sign Hash
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        
        /// <param name="completeSignRequest"> (optional)</param>
        
        /// <returns>Task of ApiResponse (CompleteSignHashResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CompleteSignHashResponse>> CompleteSignHashAsyncWithHttpInfo (CompleteSignRequest completeSignRequest = null);
        /// <summary>
        /// Get User Info To Sign Document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        
        
        
        /// <returns>Task of UserInfoResponse</returns>
        System.Threading.Tasks.Task<UserInfoResponse> GetUserInfoAsync ();

        /// <summary>
        /// Get User Info To Sign Document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        
        
        
        /// <returns>Task of ApiResponse (UserInfoResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserInfoResponse>> GetUserInfoAsyncWithHttpInfo ();
        /// <summary>
        /// Report status from the TSP to DocuSign
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        
        /// <param name="tspHealthCheckRequest"> (optional)</param>
        
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task HealthCheckAsync (TspHealthCheckRequest tspHealthCheckRequest = null);

        /// <summary>
        /// Report status from the TSP to DocuSign
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        
        /// <param name="tspHealthCheckRequest"> (optional)</param>
        
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> HealthCheckAsyncWithHttpInfo (TspHealthCheckRequest tspHealthCheckRequest = null);
        /// <summary>
        /// Get Signature Session Info To Sign Document Hash
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        
        /// <param name="signSessionInfoRequest"> (optional)</param>
        
        /// <returns>Task of SignHashSessionInfoResponse</returns>
        System.Threading.Tasks.Task<SignHashSessionInfoResponse> SignHashSessionInfoAsync (SignSessionInfoRequest signSessionInfoRequest = null);

        /// <summary>
        /// Get Signature Session Info To Sign Document Hash
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        
        /// <param name="signSessionInfoRequest"> (optional)</param>
        
        /// <returns>Task of ApiResponse (SignHashSessionInfoResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SignHashSessionInfoResponse>> SignHashSessionInfoAsyncWithHttpInfo (SignSessionInfoRequest signSessionInfoRequest = null);
        /// <summary>
        /// Report an error from the tsp to docusign
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        
        /// <param name="updateTransactionRequest"> (optional)</param>
        
        /// <returns>Task of UpdateTransactionResponse</returns>
        System.Threading.Tasks.Task<UpdateTransactionResponse> UpdateTransactionAsync (UpdateTransactionRequest updateTransactionRequest = null);

        /// <summary>
        /// Report an error from the tsp to docusign
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        
        /// <param name="updateTransactionRequest"> (optional)</param>
        
        /// <returns>Task of ApiResponse (UpdateTransactionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<UpdateTransactionResponse>> UpdateTransactionAsyncWithHttpInfo (UpdateTransactionRequest updateTransactionRequest = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class SignatureApi : ISignatureApi
    {
        private DocuSign.eSign.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SignatureApi"/> class
        /// using AplClient object
        /// </summary>
        /// <param name="aplClient">An instance of AplClient</param>
        /// <returns></returns>
        public SignatureApi(ApiClient aplClient)
        {
            this.ApiClient = aplClient;

            ExceptionFactory = Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Gets or sets the ApiClient object
        /// </summary>
        /// <value>An instance of the ApiClient</value>
        public ApiClient ApiClient { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public DocuSign.eSign.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }



        /// <summary>
        /// Complete Sign Hash 
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        
        /// <param name="completeSignRequest"> (optional)</param>
        
        /// <returns>CompleteSignHashResponse</returns>
        public CompleteSignHashResponse CompleteSignHash (CompleteSignRequest completeSignRequest = null)
        {
             ApiResponse<CompleteSignHashResponse> localVarResponse = CompleteSignHashWithHttpInfo(completeSignRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Complete Sign Hash 
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        
        /// <param name="completeSignRequest"> (optional)</param>
        
        /// <returns>ApiResponse of CompleteSignHashResponse</returns>
        public ApiResponse< CompleteSignHashResponse > CompleteSignHashWithHttpInfo (CompleteSignRequest completeSignRequest = null)
        {

            var localVarPath = "/v2.1/signature/completesignhash";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");


            if (completeSignRequest != null && completeSignRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.ApiClient.Serialize(completeSignRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = completeSignRequest; // byte array
            }

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CompleteSignHash", localVarResponse);
                if (exception != null) throw exception;
            }

            
            // DocuSign: Handle for PDF return types
            if (localVarResponse.ContentType != null && !localVarResponse.ContentType.ToLower().Contains("json"))
            {
                return new ApiResponse<CompleteSignHashResponse>(localVarStatusCode, localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()), (CompleteSignHashResponse) this.ApiClient.Deserialize(localVarResponse.RawBytes, typeof(CompleteSignHashResponse)));
            }
            else
            {
                return new ApiResponse<CompleteSignHashResponse>(localVarStatusCode, localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()), (CompleteSignHashResponse) this.ApiClient.Deserialize(localVarResponse, typeof(CompleteSignHashResponse)));
            }
            
        }

        /// <summary>
        /// Complete Sign Hash 
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        
        /// <param name="completeSignRequest"> (optional)</param>
        
        /// <returns>Task of CompleteSignHashResponse</returns>
        public async System.Threading.Tasks.Task<CompleteSignHashResponse> CompleteSignHashAsync (CompleteSignRequest completeSignRequest = null)
        {
             ApiResponse<CompleteSignHashResponse> localVarResponse = await CompleteSignHashAsyncWithHttpInfo(completeSignRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Complete Sign Hash 
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        
        /// <param name="completeSignRequest"> (optional)</param>
        
        /// <returns>Task of ApiResponse (CompleteSignHashResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CompleteSignHashResponse>> CompleteSignHashAsyncWithHttpInfo (CompleteSignRequest completeSignRequest = null)
        {

            var localVarPath = "/v2.1/signature/completesignhash";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");


            if (completeSignRequest != null && completeSignRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.ApiClient.Serialize(completeSignRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = completeSignRequest; // byte array
            }

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CompleteSignHash", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CompleteSignHashResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CompleteSignHashResponse) this.ApiClient.Deserialize(localVarResponse, typeof(CompleteSignHashResponse)));
            
        }



        /// <summary>
        /// Get User Info To Sign Document 
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        
        
        
        /// <returns>UserInfoResponse</returns>
        public UserInfoResponse GetUserInfo ()
        {
             ApiResponse<UserInfoResponse> localVarResponse = GetUserInfoWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get User Info To Sign Document 
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        
        
        
        /// <returns>ApiResponse of UserInfoResponse</returns>
        public ApiResponse< UserInfoResponse > GetUserInfoWithHttpInfo ()
        {

            var localVarPath = "/v2.1/signature/userInfo";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");



            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUserInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            
            // DocuSign: Handle for PDF return types
            if (localVarResponse.ContentType != null && !localVarResponse.ContentType.ToLower().Contains("json"))
            {
                return new ApiResponse<UserInfoResponse>(localVarStatusCode, localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()), (UserInfoResponse) this.ApiClient.Deserialize(localVarResponse.RawBytes, typeof(UserInfoResponse)));
            }
            else
            {
                return new ApiResponse<UserInfoResponse>(localVarStatusCode, localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()), (UserInfoResponse) this.ApiClient.Deserialize(localVarResponse, typeof(UserInfoResponse)));
            }
            
        }

        /// <summary>
        /// Get User Info To Sign Document 
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        
        
        
        /// <returns>Task of UserInfoResponse</returns>
        public async System.Threading.Tasks.Task<UserInfoResponse> GetUserInfoAsync ()
        {
             ApiResponse<UserInfoResponse> localVarResponse = await GetUserInfoAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get User Info To Sign Document 
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        
        
        
        /// <returns>Task of ApiResponse (UserInfoResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UserInfoResponse>> GetUserInfoAsyncWithHttpInfo ()
        {

            var localVarPath = "/v2.1/signature/userInfo";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");



            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUserInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserInfoResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UserInfoResponse) this.ApiClient.Deserialize(localVarResponse, typeof(UserInfoResponse)));
            
        }



        /// <summary>
        /// Report status from the TSP to DocuSign 
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        
        /// <param name="tspHealthCheckRequest"> (optional)</param>
        
        /// <returns></returns>
        public void HealthCheck (TspHealthCheckRequest tspHealthCheckRequest = null)
        {
             HealthCheckWithHttpInfo(tspHealthCheckRequest);
        }

        /// <summary>
        /// Report status from the TSP to DocuSign 
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        
        /// <param name="tspHealthCheckRequest"> (optional)</param>
        
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> HealthCheckWithHttpInfo (TspHealthCheckRequest tspHealthCheckRequest = null)
        {

            var localVarPath = "/v2.1/signature/healthcheck";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");


            if (tspHealthCheckRequest != null && tspHealthCheckRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.ApiClient.Serialize(tspHealthCheckRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = tspHealthCheckRequest; // byte array
            }

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("HealthCheck", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Report status from the TSP to DocuSign 
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        
        /// <param name="tspHealthCheckRequest"> (optional)</param>
        
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task HealthCheckAsync (TspHealthCheckRequest tspHealthCheckRequest = null)
        {
             await HealthCheckAsyncWithHttpInfo(tspHealthCheckRequest);

        }

        /// <summary>
        /// Report status from the TSP to DocuSign 
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        
        /// <param name="tspHealthCheckRequest"> (optional)</param>
        
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> HealthCheckAsyncWithHttpInfo (TspHealthCheckRequest tspHealthCheckRequest = null)
        {

            var localVarPath = "/v2.1/signature/healthcheck";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");


            if (tspHealthCheckRequest != null && tspHealthCheckRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.ApiClient.Serialize(tspHealthCheckRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = tspHealthCheckRequest; // byte array
            }

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("HealthCheck", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }



        /// <summary>
        /// Get Signature Session Info To Sign Document Hash 
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        
        /// <param name="signSessionInfoRequest"> (optional)</param>
        
        /// <returns>SignHashSessionInfoResponse</returns>
        public SignHashSessionInfoResponse SignHashSessionInfo (SignSessionInfoRequest signSessionInfoRequest = null)
        {
             ApiResponse<SignHashSessionInfoResponse> localVarResponse = SignHashSessionInfoWithHttpInfo(signSessionInfoRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Signature Session Info To Sign Document Hash 
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        
        /// <param name="signSessionInfoRequest"> (optional)</param>
        
        /// <returns>ApiResponse of SignHashSessionInfoResponse</returns>
        public ApiResponse< SignHashSessionInfoResponse > SignHashSessionInfoWithHttpInfo (SignSessionInfoRequest signSessionInfoRequest = null)
        {

            var localVarPath = "/v2.1/signature/signhashsessioninfo";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");


            if (signSessionInfoRequest != null && signSessionInfoRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.ApiClient.Serialize(signSessionInfoRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = signSessionInfoRequest; // byte array
            }

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SignHashSessionInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            
            // DocuSign: Handle for PDF return types
            if (localVarResponse.ContentType != null && !localVarResponse.ContentType.ToLower().Contains("json"))
            {
                return new ApiResponse<SignHashSessionInfoResponse>(localVarStatusCode, localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()), (SignHashSessionInfoResponse) this.ApiClient.Deserialize(localVarResponse.RawBytes, typeof(SignHashSessionInfoResponse)));
            }
            else
            {
                return new ApiResponse<SignHashSessionInfoResponse>(localVarStatusCode, localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()), (SignHashSessionInfoResponse) this.ApiClient.Deserialize(localVarResponse, typeof(SignHashSessionInfoResponse)));
            }
            
        }

        /// <summary>
        /// Get Signature Session Info To Sign Document Hash 
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        
        /// <param name="signSessionInfoRequest"> (optional)</param>
        
        /// <returns>Task of SignHashSessionInfoResponse</returns>
        public async System.Threading.Tasks.Task<SignHashSessionInfoResponse> SignHashSessionInfoAsync (SignSessionInfoRequest signSessionInfoRequest = null)
        {
             ApiResponse<SignHashSessionInfoResponse> localVarResponse = await SignHashSessionInfoAsyncWithHttpInfo(signSessionInfoRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Signature Session Info To Sign Document Hash 
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        
        /// <param name="signSessionInfoRequest"> (optional)</param>
        
        /// <returns>Task of ApiResponse (SignHashSessionInfoResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SignHashSessionInfoResponse>> SignHashSessionInfoAsyncWithHttpInfo (SignSessionInfoRequest signSessionInfoRequest = null)
        {

            var localVarPath = "/v2.1/signature/signhashsessioninfo";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");


            if (signSessionInfoRequest != null && signSessionInfoRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.ApiClient.Serialize(signSessionInfoRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = signSessionInfoRequest; // byte array
            }

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SignHashSessionInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SignHashSessionInfoResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SignHashSessionInfoResponse) this.ApiClient.Deserialize(localVarResponse, typeof(SignHashSessionInfoResponse)));
            
        }



        /// <summary>
        /// Report an error from the tsp to docusign 
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        
        /// <param name="updateTransactionRequest"> (optional)</param>
        
        /// <returns>UpdateTransactionResponse</returns>
        public UpdateTransactionResponse UpdateTransaction (UpdateTransactionRequest updateTransactionRequest = null)
        {
             ApiResponse<UpdateTransactionResponse> localVarResponse = UpdateTransactionWithHttpInfo(updateTransactionRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Report an error from the tsp to docusign 
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        
        /// <param name="updateTransactionRequest"> (optional)</param>
        
        /// <returns>ApiResponse of UpdateTransactionResponse</returns>
        public ApiResponse< UpdateTransactionResponse > UpdateTransactionWithHttpInfo (UpdateTransactionRequest updateTransactionRequest = null)
        {

            var localVarPath = "/v2.1/signature/updatetransaction";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");


            if (updateTransactionRequest != null && updateTransactionRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.ApiClient.Serialize(updateTransactionRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateTransactionRequest; // byte array
            }

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateTransaction", localVarResponse);
                if (exception != null) throw exception;
            }

            
            // DocuSign: Handle for PDF return types
            if (localVarResponse.ContentType != null && !localVarResponse.ContentType.ToLower().Contains("json"))
            {
                return new ApiResponse<UpdateTransactionResponse>(localVarStatusCode, localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()), (UpdateTransactionResponse) this.ApiClient.Deserialize(localVarResponse.RawBytes, typeof(UpdateTransactionResponse)));
            }
            else
            {
                return new ApiResponse<UpdateTransactionResponse>(localVarStatusCode, localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()), (UpdateTransactionResponse) this.ApiClient.Deserialize(localVarResponse, typeof(UpdateTransactionResponse)));
            }
            
        }

        /// <summary>
        /// Report an error from the tsp to docusign 
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        
        /// <param name="updateTransactionRequest"> (optional)</param>
        
        /// <returns>Task of UpdateTransactionResponse</returns>
        public async System.Threading.Tasks.Task<UpdateTransactionResponse> UpdateTransactionAsync (UpdateTransactionRequest updateTransactionRequest = null)
        {
             ApiResponse<UpdateTransactionResponse> localVarResponse = await UpdateTransactionAsyncWithHttpInfo(updateTransactionRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Report an error from the tsp to docusign 
        /// </summary>
        /// <exception cref="DocuSign.eSign.Client.ApiException">Thrown when fails to make API call</exception>
        
        /// <param name="updateTransactionRequest"> (optional)</param>
        
        /// <returns>Task of ApiResponse (UpdateTransactionResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UpdateTransactionResponse>> UpdateTransactionAsyncWithHttpInfo (UpdateTransactionRequest updateTransactionRequest = null)
        {

            var localVarPath = "/v2.1/signature/updatetransaction";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(this.ApiClient.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");


            if (updateTransactionRequest != null && updateTransactionRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.ApiClient.Serialize(updateTransactionRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateTransactionRequest; // byte array
            }

            // authentication (docusignAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.ApiClient.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.ApiClient.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateTransaction", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpdateTransactionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UpdateTransactionResponse) this.ApiClient.Deserialize(localVarResponse, typeof(UpdateTransactionResponse)));
            
        }

    }
}